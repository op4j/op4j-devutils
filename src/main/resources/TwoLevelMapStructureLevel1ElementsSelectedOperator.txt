/*
 * =============================================================================
 * 
 *   Copyright (c) 2008, The OP4J team (http://www.op4j.org)
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 * =============================================================================
 */
package org.op4j.operators.intf.%%STRUCTUREPACKAGE%%;

import java.util.Comparator;
import java.util.Map;
%%IMPORT%%

import org.op4j.functions.IFunction;
import org.op4j.functions.converters.IConverter;
import org.op4j.functions.evaluators.IEvaluator;
import org.op4j.operators.qualities.ConvertibleSelectedOperator;
import org.op4j.operators.qualities.EvaluableSelectedOperator;
import org.op4j.operators.qualities.ExecutableSelectedOperator;
import org.op4j.operators.qualities.ModifiableMapOperator;
import org.op4j.operators.qualities.NavigableMapOperator;
import org.op4j.operators.qualities.SelectedOperator;
import org.op4j.operators.qualities.SortableOperator;
import org.op4j.operators.qualities.UniqOperator;
/**
 * 
 * @since 1.0
 * 
 * @author Daniel Fern&aacute;ndez
 *
 */
public interface Level1%%STRUCTURE%%ElementsSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%>
        extends UniqOperator<%%TARGETTYPE%%>,
                NavigableMapOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%>,
		        SortableOperator<%%TARGETELEMENTINLEVEL%%>,
                ExecutableSelectedOperator<%%TARGETTYPEINLEVEL%%>,
                ConvertibleSelectedOperator<%%TARGETTYPEINLEVEL%%>,
                EvaluableSelectedOperator<%%TARGETTYPEINLEVEL%%>,
                SelectedOperator<%%TARGETTYPEINLEVEL%%>,
                ModifiableMapOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> {



    public Level1%%STRUCTURE%%ElementsOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> endIf();


    
    public Level2%%STRUCTURE%%ElementsSelectedEntriesOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> forEachEntry();
    
    public Level1%%STRUCTURE%%ElementsSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> sort();
    public Level1%%STRUCTURE%%ElementsSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> sort(final Comparator<? super %%TARGETELEMENTINLEVEL%%> comparator);
    
    public Level1%%STRUCTURE%%ElementsSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> put(final %%TARGETELEMENTKEY%% newKey, final %%TARGETELEMENTVALUE%% newValue);
    public Level1%%STRUCTURE%%ElementsSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> insert(final int position, final %%TARGETELEMENTKEY%% newKey, final %%TARGETELEMENTVALUE%% newValue);
    public Level1%%STRUCTURE%%ElementsSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> putAll(final Map<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> map);
    public Level1%%STRUCTURE%%ElementsSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> insertAll(final int position, final Map<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> map);
    public Level1%%STRUCTURE%%ElementsSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> removeKeys(final %%TARGETELEMENTKEY%%... keys);
    public Level1%%STRUCTURE%%ElementsSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> removeMatching(final IEvaluator<Boolean, ? super %%TARGETELEMENTINLEVEL%%> eval);
    public Level1%%STRUCTURE%%ElementsSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> removeNotMatching(final IEvaluator<Boolean, ? super %%TARGETELEMENTINLEVEL%%> eval);
    public Level1%%STRUCTURE%%ElementsSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> removeKeysNot(final %%TARGETELEMENTKEY%%... keys);
    
    
    
    
    
    public Level1%%STRUCTURE%%ElementsSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> convert(final IConverter<? extends %%TARGETTYPEINLEVEL%%, ? super %%TARGETTYPEINLEVEL%%> converter);
    
    public Level1%%STRUCTURE%%ElementsSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> eval(final IEvaluator<? extends %%TARGETTYPEINLEVEL%%, ? super %%TARGETTYPEINLEVEL%%> eval);

    public Level1%%STRUCTURE%%ElementsSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> exec(final IFunction<? extends %%TARGETTYPEINLEVEL%%, ? super %%TARGETTYPEINLEVEL%%> function);
    
    
    
}
