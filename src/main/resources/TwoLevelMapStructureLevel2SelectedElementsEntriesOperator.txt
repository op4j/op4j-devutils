/*
 * =============================================================================
 * 
 *   Copyright (c) 2008, The OP4J team (http://www.op4j.org)
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 * =============================================================================
 */
package org.op4j.operators.intf.%%STRUCTUREPACKAGE%%;

import java.util.Map;
%%IMPORT%%

import org.op4j.functions.IFunction;
import org.op4j.functions.converters.IConverter;
import org.op4j.functions.evaluators.IEvaluator;
import org.op4j.operators.qualities.ConvertibleSelectedOperator;
import org.op4j.operators.qualities.EvaluableSelectedOperator;
import org.op4j.operators.qualities.ExecutableSelectedOperator;
import org.op4j.operators.qualities.NavigableMapEntryOperator;
import org.op4j.operators.qualities.NavigatingMapOperator;
import org.op4j.operators.qualities.SelectableMapEntryOperator;
import org.op4j.operators.qualities.UniqOperator;


/**
 * 
 * @since 1.0
 * 
 * @author Daniel Fern&aacute;ndez
 *
 */
public interface Level2%%STRUCTURE%%SelectedElementsEntriesOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> 
		extends UniqOperator<%%TARGETTYPE%%>,
		        NavigableMapEntryOperator,
                ExecutableSelectedOperator<%%TARGETTYPEINLEVEL%%>,
                EvaluableSelectedOperator<%%TARGETTYPEINLEVEL%%>,
                ConvertibleSelectedOperator<%%TARGETTYPEINLEVEL%%>,
                SelectableMapEntryOperator<%%TARGETELEMENTKEY%%, %%TARGETELEMENTVALUE%%>,
                NavigatingMapOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> {


    public Level2%%STRUCTURE%%SelectedElementsEntriesSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> ifIndex(final int... indices);
    public Level2%%STRUCTURE%%SelectedElementsEntriesSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> ifMatching(final IEvaluator<Boolean, ? super Map.Entry<%%TARGETELEMENTKEY%%, %%TARGETELEMENTVALUE%%>> eval);
    public Level2%%STRUCTURE%%SelectedElementsEntriesSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> ifNotMatching(final IEvaluator<Boolean, ? super Map.Entry<%%TARGETELEMENTKEY%%, %%TARGETELEMENTVALUE%%>> eval);
    public Level2%%STRUCTURE%%SelectedElementsEntriesSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> ifIndexNot(final int... indices);
    public Level2%%STRUCTURE%%SelectedElementsEntriesSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> ifKeyEquals(final %%TARGETELEMENTKEY%%... keys);
    public Level2%%STRUCTURE%%SelectedElementsEntriesSelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> ifKeyNotEquals(final %%TARGETELEMENTKEY%%... keys);
		    
    
    public Level3%%STRUCTURE%%SelectedElementsEntriesKeyOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> onKey();
    public Level3%%STRUCTURE%%SelectedElementsEntriesValueOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> onValue();
    
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> endFor();
    
    public Level2%%STRUCTURE%%SelectedElementsEntriesOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> exec(final IFunction<? extends %%TARGETTYPEINLEVEL%%, ? super %%TARGETTYPEINLEVEL%%> function);
    
    public Level2%%STRUCTURE%%SelectedElementsEntriesOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> eval(final IEvaluator<? extends %%TARGETTYPEINLEVEL%%, ? super %%TARGETTYPEINLEVEL%%> eval);
    
    public Level2%%STRUCTURE%%SelectedElementsEntriesOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> convert(final IConverter<? extends %%TARGETTYPEINLEVEL%%, ? super %%TARGETTYPEINLEVEL%%> converter);
                                    
}
