/*
 * =============================================================================
 * 
 *   Copyright (c) 2010, The OP4J team (http://www.op4j.org)
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 * =============================================================================
 */
package org.op4j.operators.intf.%%STRUCTUREPACKAGE%%;

%%IMPORT%%

import org.op4j.functions.IFunction;
import org.op4j.operators.qualities.Executable%%EQUIVALENTSTRUCTURE%%SelectedOperator;
import org.op4j.operators.qualities.NavigatingCollectionOperator;
import org.op4j.operators.qualities.SelectableElementsOperator;
import org.op4j.operators.qualities.UniqOperator;
import org.op4j.operators.qualities.ReplaceableOperator;


/**
 * 
 * @since 1.0
 * 
 * @author Daniel Fern&aacute;ndez
 *
 */
public interface ILevel1%%STRUCTURE%%SelectedElementsOperator<I,%%TARGETELEMENT%%>
        extends UniqOperator<%%TARGETTYPE%%>,
                NavigatingCollectionOperator<%%TARGETTYPEINLEVEL%%>,
                SelectableElementsOperator<%%TARGETTYPEINLEVEL%%>,
                Executable%%EQUIVALENTSTRUCTURE%%SelectedOperator<%%TARGETELEMENT%%>,
                ReplaceableOperator<%%TARGETTYPEINLEVEL%%> {



    public ILevel1%%STRUCTURE%%SelectedElementsSelectedOperator<I,%%TARGETELEMENT%%> ifIndex(final int... indexes);
    public ILevel1%%STRUCTURE%%SelectedElementsSelectedOperator<I,%%TARGETELEMENT%%> ifTrue(final IFunction<? super %%TARGETTYPEINLEVEL%%,Boolean> eval);
    public ILevel1%%STRUCTURE%%SelectedElementsSelectedOperator<I,%%TARGETELEMENT%%> ifFalse(final IFunction<? super %%TARGETTYPEINLEVEL%%,Boolean> eval);
    public ILevel1%%STRUCTURE%%SelectedElementsSelectedOperator<I,%%TARGETELEMENT%%> ifNullOrFalse(final IFunction<? super %%TARGETTYPEINLEVEL%%,Boolean> eval);
    public ILevel1%%STRUCTURE%%SelectedElementsSelectedOperator<I,%%TARGETELEMENT%%> ifNotNullAndFalse(final IFunction<? super %%TARGETTYPEINLEVEL%%,Boolean> eval);
    public ILevel1%%STRUCTURE%%SelectedElementsSelectedOperator<I,%%TARGETELEMENT%%> ifNull();
    public ILevel1%%STRUCTURE%%SelectedElementsSelectedOperator<I,%%TARGETELEMENT%%> ifNullOrTrue(final IFunction<? super %%TARGETTYPEINLEVEL%%,Boolean> eval);
    public ILevel1%%STRUCTURE%%SelectedElementsSelectedOperator<I,%%TARGETELEMENT%%> ifIndexNot(final int... indexes);
    public ILevel1%%STRUCTURE%%SelectedElementsSelectedOperator<I,%%TARGETELEMENT%%> ifNotNull();
    public ILevel1%%STRUCTURE%%SelectedElementsSelectedOperator<I,%%TARGETELEMENT%%> ifNotNullAndTrue(final IFunction<? super %%TARGETTYPEINLEVEL%%,Boolean> eval);


		    
    public ILevel0%%STRUCTURE%%SelectedOperator<I,%%TARGETELEMENT%%> endFor();

    public ILevel1%%STRUCTURE%%SelectedElementsOperator<I,%%TARGETELEMENT%%> replaceWith(final %%TARGETTYPEINLEVEL%% replacement);

    public ILevel1%%STRUCTURE%%SelectedElementsOperator<I,%%TARGETELEMENT%%> exec(final IFunction<? super %%TARGETTYPEINLEVEL%%,? extends %%FLEXIBLETARGETTYPEINLEVEL%%> function);
	
    
}
