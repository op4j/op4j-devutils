/*
 * =============================================================================
 * 
 *   Copyright (c) 2010, The OP4J team (http://www.op4j.org)
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 * =============================================================================
 */
package org.op4j.operators.intf.%%STRUCTUREPACKAGE%%;

import java.util.Comparator;
import java.util.Map;

import org.op4j.functions.IFunction;
import org.op4j.operators.qualities.Executable%%EQUIVALENTSTRUCTURE%%SelectedOperator;
import org.op4j.operators.qualities.ModifiableMapOperator;
import org.op4j.operators.qualities.NavigableMapOperator;
import org.op4j.operators.qualities.SelectedOperator;
import org.op4j.operators.qualities.SortableOperator;
import org.op4j.operators.qualities.UniqOperator;
import org.op4j.operators.qualities.ReplaceableOperator;
/**
 * 
 * @since 1.0
 * 
 * @author Daniel Fern&aacute;ndez
 *
 */
public interface ILevel0%%STRUCTURE%%SelectedOperator<I,%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%>
        extends UniqOperator<%%TARGETTYPE%%>,
                NavigableMapOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%>,
		        SortableOperator<%%TARGETELEMENTINLEVEL%%>,
                Executable%%EQUIVALENTSTRUCTURE%%SelectedOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%>,
                ReplaceableOperator<%%TARGETTYPEINLEVEL%%>,
                ModifiableMapOperator<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%>,
                SelectedOperator<%%TARGETTYPEINLEVEL%%> {



    public ILevel0%%STRUCTURE%%Operator<I,%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> endIf();


    
    public ILevel1%%STRUCTURE%%SelectedEntriesOperator<I,%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> forEachEntry();
    
    public ILevel0%%STRUCTURE%%SelectedOperator<I,%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> sort();
    public ILevel0%%STRUCTURE%%SelectedOperator<I,%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> sort(final Comparator<? super %%TARGETELEMENTINLEVEL%%> comparator);
    public ILevel0%%STRUCTURE%%SelectedOperator<I,%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> sortBy(final IFunction<? super %%TARGETELEMENTINLEVEL%%,?> by);
    
    public ILevel0%%STRUCTURE%%SelectedOperator<I,%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> put(final %%TARGETELEMENTKEY%% newKey, final %%TARGETELEMENTVALUE%% newValue);
    public ILevel0%%STRUCTURE%%SelectedOperator<I,%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> insert(final int position, final %%TARGETELEMENTKEY%% newKey, final %%TARGETELEMENTVALUE%% newValue);
    public ILevel0%%STRUCTURE%%SelectedOperator<I,%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> putAll(final Map<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> map);
    public ILevel0%%STRUCTURE%%SelectedOperator<I,%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> insertAll(final int position, final Map<%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> map);
    public ILevel0%%STRUCTURE%%SelectedOperator<I,%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> removeAllKeys(final K... keys);
    public ILevel0%%STRUCTURE%%SelectedOperator<I,%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> removeAllTrue(final IFunction<? super %%TARGETELEMENTINLEVEL%%,Boolean> eval);
    public ILevel0%%STRUCTURE%%SelectedOperator<I,%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> removeAllFalse(final IFunction<? super %%TARGETELEMENTINLEVEL%%,Boolean> eval);
    public ILevel0%%STRUCTURE%%SelectedOperator<I,%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> removeAllKeysNot(final K... keys);
    
    
    
    public ILevel0%%STRUCTURE%%SelectedOperator<I,%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> execIfNotNullAs%%EQUIVALENTSTRUCTURE%%(final IFunction<? super %%TARGETTYPEINLEVEL%%,? extends %%FLEXIBLETARGETTYPEINLEVEL%%> function);

    public ILevel0%%STRUCTURE%%SelectedOperator<I,%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> replaceWith(final %%TARGETTYPEINLEVEL%% replacement);

    public ILevel0%%STRUCTURE%%SelectedOperator<I,%%TARGETELEMENTKEY%%,%%TARGETELEMENTVALUE%%> execAs%%EQUIVALENTSTRUCTURE%%(final IFunction<? super %%TARGETTYPEINLEVEL%%,? extends %%FLEXIBLETARGETTYPEINLEVEL%%> function);
    
    
}
