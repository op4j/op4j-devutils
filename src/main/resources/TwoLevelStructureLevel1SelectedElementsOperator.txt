/*
 * =============================================================================
 * 
 *   Copyright (c) 2008, The OP4J team (http://www.op4j.org)
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 * =============================================================================
 */
package org.op4j.operators.intf.%%STRUCTUREPACKAGE%%;

import java.util.Collection;
import java.util.Comparator;
%%IMPORT%%

import org.op4j.functions.IFunction;
import org.op4j.operators.qualities.DistinguishableOperator;
import org.op4j.operators.qualities.Executable%%EQUIVALENTSTRUCTURE%%SelectedOperator;
import org.op4j.operators.qualities.ModifiableCollectionOperator;
import org.op4j.operators.qualities.NavigableCollectionOperator;
import org.op4j.operators.qualities.NavigatingCollectionOperator;
import org.op4j.operators.qualities.SelectableOperator;
import org.op4j.operators.qualities.SortableOperator;
import org.op4j.operators.qualities.UniqOperator;
import org.op4j.operators.qualities.ReplaceableOperator;
/**
 * 
 * @since 1.0
 * 
 * @author Daniel Fern&aacute;ndez
 *
 */
public interface Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%>
        extends UniqOperator<%%TARGETTYPE%%>,
                NavigableCollectionOperator<%%TARGETELEMENTINLEVEL%%>,
    	        DistinguishableOperator,
		        SortableOperator<%%TARGETELEMENTINLEVEL%%>,
                Executable%%EQUIVALENTSTRUCTURE%%SelectedOperator<%%TARGETELEMENT%%>,
                ReplaceableOperator<%%TARGETTYPEINLEVEL%%>,
                NavigatingCollectionOperator<%%TARGETTYPEINLEVEL%%>,
                ModifiableCollectionOperator<%%TARGETELEMENTINLEVEL%%>,
                SelectableOperator<%%TARGETTYPEINLEVEL%%> {



    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%> endFor();


    public Level1%%STRUCTURE%%SelectedElementsSelectedOperator<%%TARGETELEMENT%%> ifIndex(final int... indexes);
    public Level1%%STRUCTURE%%SelectedElementsSelectedOperator<%%TARGETELEMENT%%> ifTrue(final IFunction<Boolean, ? super %%TARGETTYPEINLEVEL%%> eval);
    public Level1%%STRUCTURE%%SelectedElementsSelectedOperator<%%TARGETELEMENT%%> ifFalse(final IFunction<Boolean, ? super %%TARGETTYPEINLEVEL%%> eval);
    public Level1%%STRUCTURE%%SelectedElementsSelectedOperator<%%TARGETELEMENT%%> ifNullOrFalse(final IFunction<Boolean, ? super %%TARGETTYPEINLEVEL%%> eval);
    public Level1%%STRUCTURE%%SelectedElementsSelectedOperator<%%TARGETELEMENT%%> ifNotNullAndFalse(final IFunction<Boolean, ? super %%TARGETTYPEINLEVEL%%> eval);
    public Level1%%STRUCTURE%%SelectedElementsSelectedOperator<%%TARGETELEMENT%%> ifNull();
    public Level1%%STRUCTURE%%SelectedElementsSelectedOperator<%%TARGETELEMENT%%> ifNullOrTrue(final IFunction<Boolean, ? super %%TARGETTYPEINLEVEL%%> eval);
    public Level1%%STRUCTURE%%SelectedElementsSelectedOperator<%%TARGETELEMENT%%> ifIndexNot(final int... indexes);
    public Level1%%STRUCTURE%%SelectedElementsSelectedOperator<%%TARGETELEMENT%%> ifNotNull();
    public Level1%%STRUCTURE%%SelectedElementsSelectedOperator<%%TARGETELEMENT%%> ifNotNullAndTrue(final IFunction<Boolean, ? super %%TARGETTYPEINLEVEL%%> eval);


            
    public Level2%%STRUCTURE%%SelectedElementsElementsOperator<%%TARGETELEMENT%%> forEach(%%FOREACHELEMENTTYPE%%);

    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> distinct();
    
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> sort();
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> sort(final Comparator<? super %%TARGETELEMENTINLEVEL%%> comparator);
    
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> add(final %%TARGETELEMENTINLEVEL%% newElement);
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> addAll(final %%TARGETELEMENTINLEVEL%%... newElements);
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> insert(final int position, final %%TARGETELEMENTINLEVEL%% newElement);
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> insertAll(final int position, final %%TARGETELEMENTINLEVEL%%... newElements);
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> addAll(final Collection<%%TARGETELEMENTINLEVEL%%> collection);
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> removeAllIndexes(final int... indexes);
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> removeAllEqual(final %%TARGETELEMENTINLEVEL%%... values);
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> removeAllTrue(final IFunction<Boolean, ? super %%TARGETELEMENTINLEVEL%%> eval);
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> removeAllFalse(final IFunction<Boolean, ? super %%TARGETELEMENTINLEVEL%%> eval);
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> removeAllNullOrFalse(final IFunction<Boolean, ? super %%TARGETELEMENTINLEVEL%%> eval);
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> removeAllNotNullAndFalse(final IFunction<Boolean, ? super %%TARGETELEMENTINLEVEL%%> eval);
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> removeAllNotNullAndTrue(final IFunction<Boolean, ? super %%TARGETELEMENTINLEVEL%%> eval);
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> removeAllNullOrTrue(final IFunction<Boolean, ? super %%TARGETELEMENTINLEVEL%%> eval);
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> removeAllIndexesNot(final int... indexes);
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> removeAllNull();
    
    
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> execIfNotNullAs%%EQUIVALENTSTRUCTURE%%(final IFunction<? extends %%FLEXIBLETARGETTYPEINLEVEL%%,? super %%TARGETTYPEINLEVEL%%> function);

    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> replaceWith(final %%TARGETTYPEINLEVEL%% replacement);

    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> execAs%%EQUIVALENTSTRUCTURE%%(final IFunction<? extends %%FLEXIBLETARGETTYPEINLEVEL%%, ? super %%TARGETTYPEINLEVEL%%> function);


    
    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%> map(final IFunction<? extends %%TARGETELEMENTINLEVEL%%, ? super %%TARGETELEMENTINLEVEL%%> function);
		            
}
