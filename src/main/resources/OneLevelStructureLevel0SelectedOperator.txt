/*
 * =============================================================================
 * 
 *   Copyright (c) 2008, The OP4J team (http://www.op4j.org)
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 * =============================================================================
 */
package org.op4j.operators.op.intf.%%STRUCTUREPACKAGE%%;

import java.util.Collection;
import java.util.Comparator;
%%IMPORT%%

import org.op4j.functions.IFunction;
import org.op4j.operators.qualities.DistinguishableOperator;
import org.op4j.operators.qualities.Executable%%EQUIVALENTSTRUCTURE%%SelectedOperator;
import org.op4j.operators.qualities.ModifiableCollectionOperator;
import org.op4j.operators.qualities.NavigableCollectionOperator;
import org.op4j.operators.qualities.SelectedOperator;
import org.op4j.operators.qualities.SortableOperator;
import org.op4j.operators.qualities.UniqOpOperator;
import org.op4j.operators.qualities.ReplaceableOperator;
/**
 * 
 * @since 1.0
 * 
 * @author Daniel Fern&aacute;ndez
 *
 */
public interface Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I>
        extends UniqOpOperator<%%TARGETTYPE%%>,
                NavigableCollectionOperator<%%TARGETELEMENTINLEVEL%%>,
                DistinguishableOperator,
                SortableOperator<%%TARGETELEMENTINLEVEL%%>,
                ModifiableCollectionOperator<%%TARGETELEMENTINLEVEL%%>,
                SelectedOperator<%%TARGETTYPEINLEVEL%%>,
                Executable%%EQUIVALENTSTRUCTURE%%SelectedOperator<%%TARGETELEMENT%%>,
                ReplaceableOperator<%%TARGETTYPEINLEVEL%%> {



    public Level0%%STRUCTURE%%Operator<%%TARGETELEMENT%%,I> endIf();



    public Level1%%STRUCTURE%%SelectedElementsOperator<%%TARGETELEMENT%%,I> forEach(%%FOREACHELEMENTTYPE%%);

    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> distinct();
    
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> sort();
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> sort(final Comparator<? super %%TARGETELEMENTINLEVEL%%> comparator);
        
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> add(final %%TARGETELEMENTINLEVEL%% newElement);
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> addAll(final %%TARGETELEMENTINLEVEL%%... newElements);
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> insert(final int position, final %%TARGETELEMENTINLEVEL%% newElement);
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> insertAll(final int position, final %%TARGETELEMENTINLEVEL%%... newElements);
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> addAll(final Collection<%%TARGETELEMENTINLEVEL%%> collection);
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> removeAllIndexes(final int... indexes);
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> removeAllEqual(final %%TARGETELEMENTINLEVEL%%... values);
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> removeAllTrue(final IFunction<Boolean, ? super %%TARGETELEMENTINLEVEL%%> eval);
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> removeAllFalse(final IFunction<Boolean, ? super %%TARGETELEMENTINLEVEL%%> eval);
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> removeAllNullOrFalse(final IFunction<Boolean, ? super %%TARGETELEMENTINLEVEL%%> eval);
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> removeAllNotNullAndFalse(final IFunction<Boolean, ? super %%TARGETELEMENTINLEVEL%%> eval);
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> removeAllNotNullAndTrue(final IFunction<Boolean, ? super %%TARGETELEMENTINLEVEL%%> eval);
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> removeAllNullOrTrue(final IFunction<Boolean, ? super %%TARGETELEMENTINLEVEL%%> eval);
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> removeAllIndexesNot(final int... indexes);
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> removeAllNull();
    
    
    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> execIfNotNullAs%%EQUIVALENTSTRUCTURE%%(final IFunction<? extends %%FLEXIBLETARGETTYPEINLEVEL%%,? super %%TARGETTYPEINLEVEL%%> function);

    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> replaceWith(final %%TARGETTYPEINLEVEL%% replacement);

    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> execAs%%EQUIVALENTSTRUCTURE%%(final IFunction<? extends %%FLEXIBLETARGETTYPEINLEVEL%%, ? super %%TARGETTYPEINLEVEL%%> function);


    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> map(final IFunction<? extends %%TARGETELEMENTINLEVEL%%, ? super %%TARGETELEMENTINLEVEL%%> function);

    public Level0%%STRUCTURE%%SelectedOperator<%%TARGETELEMENT%%,I> mapIfNotNull(final IFunction<? extends %%TARGETELEMENTINLEVEL%%, ? super %%TARGETELEMENTINLEVEL%%> function);
    
    
}
